package com.lib.managment.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lib.managment.dtos.PublisherDto;
import com.lib.managment.dtos.publisherDto;
import com.lib.managment.models.Publisher;
import com.lib.managment.models.Student;
import com.lib.managment.repository.PublisherRepository;
import com.lib.managment.service.FileServices;
import com.lib.managment.service.Publisherservice;
import com.lib.managment.service.StudentService;

@Service
public class PublisherServiceImpl implements Publisherservice {

	@Autowired
	private PublisherRepository publisherRepository;

	@Autowired
	private ModelMapper modelMapper;
	

	@Override
	public PublisherDto addPublisher(PublisherDto publisherDto) {
		
		Publisher publisher = modelMapper.map(publisherDto, Publisher.class);
		publisher = publisherRepository.save(publisher);
		return modelMapper.map(publisher, publisherDto.getClass());
	}

	@Override
	public List<PublisherDto> getAllPublishers() {
		List<Publisher> all = publisherRepository.findAll();
		return Arrays.asList(modelMapper.map(all, PublisherDto[].class));
	}

	@Override
	public publisherDto getStudentById(Integer sid) {
		Student student = publisherRepository.findById(sid)
				.orElseThrow(() -> new RuntimeException("Student does not exist with id " + sid));
		return modelMapper.map(student, publisherDto.class);
	}

	@Override
	public publisherDto updateStudent(publisherDto publisherDto, MultipartFile file) {

//		updating user profile
		Student student = publisherRepository.findById(publisherDto.getSid())
				.orElseThrow(() -> new ResourceAccessException("student not exist"));
		try {


			if (!file.isEmpty()) {
				String uploadImage = fileServices.uploadImage(UPLOAD_DIR, file);
				publisherDto.setProfile(uploadImage);
			}
			
		}
		catch (Exception e) {
			System.out.println("SOMETHING WENT WRONG, TRY AGAIN "+e);
		}

		student.setFname(publisherDto.getFname());
		publisherDto.setEmail(publisherDto.getEmail());
		publisherDto.setMobile(publisherDto.getMobile());

		if (publisherDto.getProfile() != null) {
			student.setProfile(publisherDto.getProfile());
		}
		student = publisherRepository.save(student);
		return modelMapper.map(student, publisherDto.class);

	}


}
