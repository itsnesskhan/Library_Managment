package com.lib.managment.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lib.managment.dtos.StudentDto;
import com.lib.managment.dtos.VarifyOtpRequest;
import com.lib.managment.helper.ApiResponse;
import com.lib.managment.helper.RoleEnum;
import com.lib.managment.models.Student;
import com.lib.managment.models.UserRole;
import com.lib.managment.repository.StudentRepository;
import com.lib.managment.service.EmailService;
import com.lib.managment.service.FileServices;
import com.lib.managment.service.StudentService;

@Service
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private FileServices fileServices;
	
	@Autowired
	private EmailService emailService;
	
	private StudentDto globalStudentDto;
	
	private Integer OTP;
	
	private String email;
	
	@Value("${file.upload.dir}")
	private String UPLOAD_DIR;

	@Override
	public StudentDto addStudent(StudentDto studentDto) {
		
		Optional<Student> dbStudent = studentRepository.findByEmailOrMobileNumber(studentDto.getEmail(),
				studentDto.getMobile());

		if (dbStudent.isPresent()) {
			throw new RuntimeException("student already exist");
		}
		UserRole userRole = new UserRole();
		userRole.setRid(101);
		userRole.setName(RoleEnum.STUDENT.getRole());
		Student student = modelMapper.map(studentDto, Student.class);
		student.setRole(userRole);
		student.setProfile("default.jpg");
		student.setBookIssuedCount("0");
		student = studentRepository.save(student);
		return modelMapper.map(student, studentDto.getClass());
	}

	@Override
	public List<StudentDto> getAllStudents() {
		List<Student> all = studentRepository.findAll();
		return Arrays.asList(modelMapper.map(all, StudentDto[].class));
	}

	@Override
	public StudentDto getStudentById(Integer sid) {
		Student student = studentRepository.findById(sid)
				.orElseThrow(() -> new RuntimeException("Student does not exist with id " + sid));
		return modelMapper.map(student, StudentDto.class);
	}

	@Override
	public StudentDto updateStudent(StudentDto studentDto, MultipartFile file) {

//		updating user profile
		Student student = studentRepository.findById(studentDto.getSid())
				.orElseThrow(() -> new ResourceAccessException("student not exist"));
		try {


			if (!file.isEmpty()) {
				String uploadImage = fileServices.uploadImage(UPLOAD_DIR, file);
				studentDto.setProfile(uploadImage);
			}
			
		}
		catch (Exception e) {
			System.out.println("SOMETHING WENT WRONG, TRY AGAIN "+e);
		}

		student.setFname(studentDto.getFname());
		studentDto.setEmail(studentDto.getEmail());
		studentDto.setMobile(studentDto.getMobile());

		if (studentDto.getProfile() != null) {
			student.setProfile(studentDto.getProfile());
		}
		student = studentRepository.save(student);
		return modelMapper.map(student, StudentDto.class);

	}

	public StudentDto getJson(String studentString) {

		StudentDto studentDto = new StudentDto();
		ObjectMapper mapper = new ObjectMapper();

		try {
			mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);

			studentDto = mapper.readValue(studentString, studentDto.getClass());

		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return studentDto;
	}

	@Override
	public boolean registerStudentWithEmailVarification(StudentDto studentDto) {
		
		Random random = new Random();
		Integer otp = random.nextInt(111111, 999999);
		globalStudentDto = studentDto;
		OTP = otp;
		email = email;
		boolean mailSend = emailService.sendEmail("Varification of Email" , "Varification OTP "+ otp, studentDto.getEmail());
		return mailSend;
	}

	@Override
	public ApiResponse varifyOtp(VarifyOtpRequest varifyOtpRequest) {
		System.out.println("server otp "+OTP);
		System.out.println("user otp"+varifyOtpRequest.getOtp());
		if (OTP.equals(varifyOtpRequest.getOtp()) && email.equals(varifyOtpRequest.getEmail())) {
			Student student = this.modelMapper.map(globalStudentDto, Student.class);
			studentRepository.save(student);
			emailService.sendEmail( "Varification Successfull","Successfully! resgistered ", email);
			
			 return new ApiResponse(modelMapper.map(student, StudentDto.class),"Varification Successfull!");
		}
		return new ApiResponse(modelMapper.map(globalStudentDto, StudentDto.class),"Varification FAILED, Try again");
	}

}
