package com.lib.managment.controllers;

import java.util.List;
import java.util.Optional;

import org.jboss.logging.Messages;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lib.managment.dtos.StudentDto;
import com.lib.managment.service.StudentService;

@RestController
@RequestMapping("/api/v1/student")
public class StudentController {

	@Autowired
	private StudentService studentService;
	
	@PostMapping()
	public ResponseEntity<StudentDto> addStudent(@RequestBody StudentDto studentDto){
		StudentDto student = studentService.addStudent(studentDto);
		return ResponseEntity.status(HttpStatus.CREATED).body(student);
	}
	
	@GetMapping()
	public ResponseEntity<List<StudentDto	>> getStudents(){
		List<StudentDto> students = studentService.getAllStudents();
		return ResponseEntity.status(HttpStatus.OK).body(students);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<StudentDto> getStudentById(@PathVariable Integer id){
		StudentDto student = studentService.getStudentById(id);
		return ResponseEntity.status(HttpStatus.OK).body(student);
	}
	
	@PutMapping(consumes = {org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE})
	public ResponseEntity<?> updateUser(@RequestParam("user") String userString,
			@RequestPart(name = "profile", required = false) Optional<MultipartFile> file) {
		
		try {
			
			UserDto json = userServices.getJson(userString);

			if (!file.isEmpty()) {
				String uploadImage = fileServices.uploadImage(Constants.UPLOAD_DIR, file.get());    
				
				System.out.println(uploadImage);
				
				
				ServletUriComponentsBuilder currentContextPath = ServletUriComponentsBuilder.fromCurrentContextPath();
				System.out.println("currentCotext "+currentContextPath);
				
				String dowloadUrl = ServletUriComponentsBuilder.fromCurrentContextPath()
						.path("/user/profile/images/")
						.path(uploadImage).toUriString();
				System.out.println(dowloadUrl);
				
				json.setProfileUrl(dowloadUrl);
			}
			
			T updateUser = (T) userServices.updateUser(json);
			
			return (T) ResponseHandler.responseBuilder(Messages.USER_UPDATED, HttpStatus.OK, updateUser);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return (T) ResponseHandler.responseBuilder(Messages.SOMETHING_WENT_WRONG, HttpStatus.INTERNAL_SERVER_ERROR, Messages.SOMETHING_WENT_WRONG);
	}
	
public StudentDto getJson(String studentString) {
		
		StudentDto studentDto = new StudentDto();
		ObjectMapper mapper = new ObjectMapper();
		
		try {
			mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
			
			studentDto = mapper.readValue(studentString, studentDto.getClass());
			
		} catch (JsonProcessingException e) {
				e.printStackTrace();
		}
		return studentDto;
	}
}
