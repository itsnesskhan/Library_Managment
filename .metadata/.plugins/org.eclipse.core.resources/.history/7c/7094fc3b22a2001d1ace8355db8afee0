package com.lib.managment.service.impl;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.jboss.logging.Messages;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lib.managment.dtos.StudentDto;
import com.lib.managment.models.Student;
import com.lib.managment.repository.StudentRepository;
import com.lib.managment.service.FileServices;
import com.lib.managment.service.StudentService;

@Service
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private FileServices fileServices;
	
	@Autowired
	private String UPLOAD_DIR;

	@Override
	public StudentDto addStudent(StudentDto studentDto) {
		Optional<Student> dbStudent = studentRepository.findByEmailOrMobileNumber(studentDto.getEmail(),
				studentDto.getMobile());

		if (dbStudent.isPresent()) {
			throw new RuntimeException("student already exist");
		}
		Student student = modelMapper.map(studentDto, Student.class);
		student = studentRepository.save(student);
		return modelMapper.map(student, studentDto.getClass());
	}

	@Override
	public List<StudentDto> getAllStudents() {
		List<Student> all = studentRepository.findAll();
		return Arrays.asList(modelMapper.map(all, StudentDto[].class));
	}

	@Override
	public StudentDto getStudentById(Integer sid) {
		Student student = studentRepository.findById(sid)
				.orElseThrow(() -> new RuntimeException("Student does not exist with id " + sid));
		return modelMapper.map(student, StudentDto.class);
	}

	@Override
	public StudentDto updateStudent(StudentDto studentDto, MultipartFile file) {

//		updating user profile
		Student student = studentRepository.findById(studentDto.getSid())
				.orElseThrow(() -> new ResourceAccessException("student not exist"));
		try {


			if (!file.isEmpty()) {
				String uploadImage = fileServices.uploadImage(UPLOAD_DIR, file);

				System.out.println(uploadImage);

				ServletUriComponentsBuilder currentContextPath = ServletUriComponentsBuilder.fromCurrentContextPath();
				System.out.println("currentCotext " + currentContextPath);

				String dowloadUrl = ServletUriComponentsBuilder.fromCurrentContextPath().path("/user/profile/images/")
						.path(uploadImage).toUriString();
				System.out.println(dowloadUrl);

				studentDto.setProfile(dowloadUrl);
			}
			
		}
		catch (Exception e) {
			System.out.println("SOMETHING WENT WRONG, TRY AGAIN "+e);
		}

		student.setFname(studentDto.getFname());
		studentDto.setEmail(studentDto.getEmail());
		studentDto.setMobile(studentDto.getMobile());

		if (studentDto.getProfile() != null) {
			student.setProfile(studentDto.getProfile());
		}
		student = studentRepository.save(student);
		return modelMapper.map(student, StudentDto.class);

	}

	public StudentDto getJson(String studentString) {

		StudentDto studentDto = new StudentDto();
		ObjectMapper mapper = new ObjectMapper();

		try {
			mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);

			studentDto = mapper.readValue(studentString, studentDto.getClass());

		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return studentDto;
	}

}
